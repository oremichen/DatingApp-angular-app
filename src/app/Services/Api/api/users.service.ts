/**
 * My EmployeeManagementAPI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CreateUsersDto } from '../model/createUsersDto';
import { LoginUser } from '../model/loginUser';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { ServiceUrlConnections } from 'src/app/ServiceUrlConnections';
import { MembersDto } from '../model/membersDto';
import { UpdateMembersDto } from '../model/updateMembersDto';
import { Members } from '../model/members';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { Responses } from '../model/response';
import { PagenatedResult, Pagenation } from '../model/pagenation';
import { UserParams } from '../model/userParams';



@Injectable()
export class UsersService {

    members: Members[]=[]
    pagenatedResult: PagenatedResult<Members[]> = new PagenatedResult<Members[]>()
    memberCache = new Map();

    protected basePath = ServiceUrlConnections.serviceUrl;
    public configuration = new Configuration();
    public defaultHeaders = new HttpHeaders();
    // public defaultHeaders =  new HttpHeaders({
    //         Authorization: 'Bearer '+ JSON.parse(localStorage.getItem('user')).userDto.token
    //     })
       
    
    constructor(private httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiUsersCreateNewUserPost(body?: CreateUsersDto, observe?: 'body', reportProgress?: boolean): Observable<Responses>;
    public apiUsersCreateNewUserPost(body?: CreateUsersDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Responses>>;
    public apiUsersCreateNewUserPost(body?: CreateUsersDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Responses>>;
    public apiUsersCreateNewUserPost(body?: CreateUsersDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Responses>('post',`${this.basePath}/api/Users/CreateNewUser`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
                
            }
        );
    }

    
    // public apiUsersGetAllUsersGet(): Observable<any> {
    //     if(this.members.length > 0) return of (this.members)

    //     return this.httpClient.request<any>('get',`${this.basePath}/api/Users/GetAllUsers`        
    //     ).pipe(map(members=>{
    //         this.members = members
    //         return members
    //     }));
    // }

    public apiUsersGetAllUsersGet(userParams: UserParams, Id: number): Observable<any> {
        console.log(Object.values(userParams).join('-'))

        const response = this.memberCache.get(Object.values(userParams).join('-'))

        if(response) return of(response)

       let params = this.getPaginationheaders(userParams.pageNumber, userParams.pageSize)

        params = params.append('minAge', userParams.minAge.toString());
        params = params.append('maxAge', userParams.maxAge.toString())
        params = params.append('gender', userParams.gender)
        params = params.append('orderBy', userParams.orderBy)


        return this.httpClient.request<any>('get',`${this.basePath}/api/Users/GetAllUsers/${Id}`, {observe:'response', params}).pipe(
            map(response=>{
                this.pagenatedResult.result = response.body
                if(response.headers.get('Pagination')!== null){
                    this.pagenatedResult.pagenation = JSON.parse(response.headers.get('Pagination'))
                }
                
                this.memberCache.set(Object.values(userParams).join('-'), response)
                return response
            })
        )
    }

    private getPaginationheaders(pageNumber: number, pageSize: number){
        let params = new HttpParams();
            params = params.append('pageNumber', pageNumber.toString())
            params = params.append('pageSize', pageSize.toString())

            return params
       
    }

    public updateUserPut(member: UpdateMembersDto): Observable<string> {
        return this.httpClient.put<string>(this.basePath + '/api/Users/UpdateUser', member)

    }
   

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public apiUsersUpdateUserPut(body?: UpdateMembersDto, observe?: 'body', reportProgress?: boolean): Observable<string>;
     public apiUsersUpdateUserPut(body?: UpdateMembersDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
     public apiUsersUpdateUserPut(body?: UpdateMembersDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
     public apiUsersUpdateUserPut(body?: UpdateMembersDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
 
         let headers = this.defaultHeaders;
 
         // to determine the Accept header
         let httpHeaderAccepts: string[] = [
             'text/plain',
             'application/json',
             'text/json'
         ];
         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         if (httpHeaderAcceptSelected != undefined) {
             headers = headers.set('Accept', httpHeaderAcceptSelected);
         }
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json',
             'text/json',
             'application/_*+json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected != undefined) {
             headers = headers.set('Content-Type', httpContentTypeSelected);
         }
        
         return this.httpClient.request<string>('put',`${this.basePath}/api/Users/UpdateUser`,
             {
                 body: body,
                 withCredentials: this.configuration.withCredentials,
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         ).pipe(map((res)=>{
             
             let member = this.convertmemberModel(body)
            const index = this.members.indexOf(member)
            this.members[index] = member
         }));
     }

     convertmemberModel(model: UpdateMembersDto): Members{
        let member: Members={}

        member.city = model.city
        member.id = model.id
        member.name = model.name
        member.dateCreated = model.dateCreated
        member.knownAs= model.knownAs
        member.lastAcvtive = model.lastAcvtive
        member.gender = model.gender
        member.introduction = model.introduction
        member.lookingFor = model.lookingFor
        member.interests = model.interests
        member.dateOfBirth = model.dateOfBirth

        return member
     }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiUsersGetUserByIdGet(id?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiUsersGetUserByIdGet(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiUsersGetUserByIdGet(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiUsersGetUserByIdGet(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        const member = this.members.find(x=> x.id === id)
        if(member !== undefined) 
        return of (member)

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/Users/GetUserById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiUsersLoginPost(body?: LoginUser, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiUsersLoginPost(body?: LoginUser, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiUsersLoginPost(body?: LoginUser, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiUsersLoginPost(body?: LoginUser, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/Users/Login`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
